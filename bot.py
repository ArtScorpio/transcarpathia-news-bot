import logging
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import requests
from bs4 import BeautifulSoup
import schedule
import time
from datetime import datetime
import pytz
import json

# –î–æ–¥–∞–π—Ç–µ —Ü–µ–π –∫–æ–¥ –≤ bot.py
def test_post(self):
    """–¢–µ—Å—Ç–æ–≤–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞"""
    try:
        test_message = "üîÑ –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞."
        self.updater.bot.send_message(
            chat_id=self.channel_id,
            text=test_message,
            parse_mode='HTML'
        )
        print("–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ: {e}")

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
from config import TOKEN, CHANNEL_ID, NEWS_SOURCES, POSTING_HOURS, POST_INTERVAL

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot_log.txt'
)
logger = logging.getLogger(__name__)

class NewsBot:
    def __init__(self, token, channel_id):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞"""
        self.updater = Updater(token=token, use_context=True)
        self.channel_id = channel_id
        self.news_sources = NEWS_SOURCES
        self.posted_news = self.load_posted_news()
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥
        dp = self.updater.dispatcher
        dp.add_handler(CommandHandler("start", self.start))
        dp.add_handler(CommandHandler("help", self.help))
        dp.add_handler(CommandHandler("status", self.status))
        dp.add_handler(CallbackQueryHandler(self.button))
        dp.add_error_handler(self.error)

    def load_posted_news(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏—Ö –Ω–æ–≤–∏–Ω"""
        try:
            with open('posted_news.json', 'r', encoding='utf-8') as file:
                return set(json.load(file))
        except FileNotFoundError:
            return set()

    def save_posted_news(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏—Ö –Ω–æ–≤–∏–Ω"""
        with open('posted_news.json', 'w', encoding='utf-8') as file:
            json.dump(list(self.posted_news), file)

    def start(self, update, context):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
        keyboard = [
            [InlineKeyboardButton("üì∞ –û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏", callback_data='latest')],
            [InlineKeyboardButton("‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å", callback_data='status')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text(
            '–í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω –ó–∞–∫–∞—Ä–ø–∞—Ç—Ç—è.',
            reply_markup=reply_markup
        )

    def help(self, update, context):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /help"""
        help_text = (
            "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
            "/start - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞\n"
            "/status - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
        )
        update.message.reply_text(help_text)

    def status(self, update, context):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /status"""
        status_text = (
            f"üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n"
            f"–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –Ω–æ–≤–∏–Ω: {len(self.posted_news)}\n"
            f"–ê–∫—Ç–∏–≤–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞: {len(self.news_sources)}\n"
            f"–ß–∞—Å —Ä–æ–±–æ—Ç–∏: {self.get_uptime()}"
        )
        update.message.reply_text(status_text)

    def button(self, update, context):
        """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        query.answer()
        
        if query.data == 'latest':
            self.show_latest_news(query)
        elif query.data == 'status':
            self.show_status(query)

    def error(self, update, context):
        """–û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫"""
        logger.warning(f'Update {update} caused error {context.error}')

    def get_news_from_source(self, source_name, url):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω –∑ –≤–∫–∞–∑–∞–Ω–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞"""
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            response = requests.get(url, headers=headers, timeout=10)
            soup = BeautifulSoup(response.text, 'html.parser')
            news_items = []

            # –ü–∞—Ä—Å–∏–Ω–≥ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –¥–∂–µ—Ä–µ–ª–∞
            if 'zakarpattya.net.ua' in url:
                news_blocks = soup.find_all('div', class_='news-title')
                for block in news_blocks[:5]:
                    link = block.find('a')
                    if link and link.get('href'):
                        title = link.text.strip()
                        news_url = link['href']
                        if news_url not in self.posted_news:
                            news_items.append({
                                'title': title,
                                'url': news_url,
                                'source': source_name
                            })
            # –î–æ–¥–∞–π—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è —ñ–Ω—à–∏—Ö –¥–∂–µ—Ä–µ–ª...

            return news_items
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω –∑ {source_name}: {e}")
            return []

    def format_news_post(self, news):
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω–∏ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó"""
        return f"""üì∞ {news['title']}

üîç –î–∂–µ—Ä–µ–ª–æ: {news['source']}
üëâ {news['url']}

#–Ω–æ–≤–∏–Ω–∏ #–∑–∞–∫–∞—Ä–ø–∞—Ç—Ç—è #–Ω–æ–≤–∏–Ω–∏–ó–∞–∫–∞—Ä–ø–∞—Ç—Ç—è"""

    def post_news(self):
        """–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –Ω–æ–≤–∏–Ω —É –∫–∞–Ω–∞–ª"""
        all_news = []
        for source_name, url in self.news_sources.items():
            news_items = self.get_news_from_source(source_name, url)
            all_news.extend(news_items)

        for news in all_news:
            if news['url'] not in self.posted_news:
                try:
                    formatted_post = self.format_news_post(news)
                    self.updater.bot.send_message(
                        chat_id=self.channel_id,
                        text=formatted_post,
                        parse_mode='HTML',
                        disable_web_page_preview=False
                    )
                    self.posted_news.add(news['url'])
                    self.save_posted_news()
                    time.sleep(POST_INTERVAL)
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω–∏: {e}")

    def schedule_news(self):
        """–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω"""
        for hour in POSTING_HOURS:
            schedule.every().day.at(f"{hour:02d}:00").do(self.post_news)

    def get_uptime(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —á–∞—Å—É —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞"""
        with open('/proc/uptime', 'r') as f:
            uptime_seconds = float(f.readline().split()[0])
        return str(datetime.timedelta(seconds=uptime_seconds))

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.schedule_news()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π. –ß–µ–∫–∞—é –Ω–∞ —Ä–æ–∑–∫–ª–∞–¥ –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π...")
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π. –ß–µ–∫–∞—é –Ω–∞ —Ä–æ–∑–∫–ª–∞–¥ –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π...")
        
        try:
            while True:
                schedule.run_pending()
                time.sleep(1)
        except KeyboardInterrupt:
            logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
            print("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    bot = NewsBot(TOKEN, CHANNEL_ID)
    bot.run()

if __name__ == '__main__':
    main()
